#!/bin/bash

. inputreader

logCommit() {
  local commit=$1
  local format=$2
  git log -1 --format="$format" "$commit" --
}

logRange() {
  local from=$1
  local to=$2
  git log --format=%H ${from:+"${from}.."}${to} --
}

subject() {
  while readline line && [ "$line" ]; do
    echo "$line"
  done
}

breakingChange() {
  local pattern='^BREAKING[ -]CHANGE: '
  while readline line; do
    if [[ "$line" =~ $pattern ]]; then
      line=${line:${#BASH_REMATCH[0]}}
      echo "$line"
      pattern='^[^[:space:]]+(: | #)'
      while readline line; do
        if [[ "$line" =~ $pattern ]]; then
          break
        fi
        echo "$line"
      done
      break
    fi
  done
}

parseCommitBody() {
  local prefix=${1:-'COMMIT_'}

  local -n __parseCommit_type="${prefix}TYPE"
  local -n __parseCommit_scope="${prefix}SCOPE"
  local -n __parseCommit_break="${prefix}BREAK"
  local -n __parseCommit_desc="${prefix}DESC"

  __parseCommit_type=
  __parseCommit_scope=
  __parseCommit_break=
  __parseCommit_desc=

  local subject=$(subject)

  local pattern='^([[:alpha:]]+)([(].+[)])?([!])?: '
  if [[ "$subject" =~ $pattern ]]; then
    subject=${subject:${#BASH_REMATCH[0]}}
    __parseCommit_type=${BASH_REMATCH[1]}
    __parseCommit_scope=${BASH_REMATCH[2]:1:-1}
    if [ "${BASH_REMATCH[3]}" ]; then
      __parseCommit_break=$subject
    fi
  fi

  __parseCommit_desc=$subject

  local breakingChange=$(breakingChange)
  if [ "$breakingChange" ]; then
    __parseCommit_break=$breakingChange
  fi
}

parseCommit() {
  local commit=$1
  local prefix=$2
  parseCommitBody "$prefix" < <(logCommit "$commit" '%B')
}
