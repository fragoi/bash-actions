#!/bin/bash

set -e -o pipefail

V_FILE=${V_FILE:-"version"}
V_MINOR=${V_MINOR:-1}
V_PATCH=${V_PATCH:-2}

TAG_PREFIX=${TAG_PREFIX:-"v"}
REMOTE=${REMOTE:-"origin"}

GIT_USER_NAME=${GIT_USER_NAME:-"github-actions"}
GIT_USER_EMAIL=${GIT_USER_EMAIL:-"github-actions@github.com"}

declare -l DEBCHANGELOG=${DEBCHANGELOG:-"n"} ## y or n
DEBPACKAGE=${DEBPACKAGE:-${GITHUB_REPOSITORY##*/}}
DEBFULLNAME=${DEBFULLNAME:-$GIT_USER_NAME}
DEBEMAIL=${DEBEMAIL:-$GIT_USER_EMAIL}
DEBDIST="UNRELEASED"
DEBREV=""

debug() {
  echo 1>&2 "$@"
}

getVersion() {
  cat $V_FILE
}

setVersion() {
  local version=$1
  echo $version > $V_FILE
}

nextVersion() {
  local version=$1
  local index=$2
  local IFS=.
  local nums=($version)
  local len=${#nums[@]}
  (( nums[index]++ ))
  while (( ++index < len )); do
    (( nums[index] = 0 ))
  done
  echo "${nums[*]}"
}

seriesPrefix() {
  local base=$1
  local pattern="^${TAG_PREFIX}"
  local i
  for (( i = 0; i < V_PATCH; i++ )); do
    pattern+="[0-9]+\."
  done
  [[ "$base" =~ $pattern ]]
  echo $BASH_REMATCH
}

getTagId() {
  local version=$1
  git ls-remote --tags $REMOTE "${TAG_PREFIX}${version}" \
    | awk '{print $1}'
}

listTags() {
  git ls-remote --tags $REMOTE "${TAG_PREFIX}*" \
    | awk '{print $2}' \
    | sed 's/^refs\/tags\///'
}

catAdd() {
  cat -
  echo "$@"
}

# prevTag() {
#   local version=$1
#   local tag="${TAG_PREFIX}${version}"
#   listTags \
#     | catAdd "$tag" \
#     | sort -Vur \
#     | grep -m 1 -A 1 -xF "$tag" \
#     | tail -n +2
# }

tailAfter() {
  local value=$1
  local line=""
  while read line && [ "$line" != "$value" ]; do
    true ## Doing nothing
  done
  if [ "$line" != "$value" ]; then
    return 1
  fi
  while read line; do
    echo $line
  done
}

filterSeries() {
  local line=""
  if ! read line; then
    return 0
  fi
  local pattern=$(seriesPrefix $line)
  if [ -z "$pattern" ]; then
    return 1
  fi
  pattern+="*"
  debug "Series pattern: ${pattern}"
  echo $line
  while read line; do
    if [[ "$line" = $pattern ]]; then
      echo $line
    fi
  done
}

prevSeries() {
  local version=$1
  local tag="${TAG_PREFIX}${version}"
  listTags \
    | catAdd "$tag" \
    | sort -Vur \
    | tailAfter "$tag" \
    | filterSeries
}

fetchChangelog() {
  local version=$1
  local series=($(prevSeries $version))
  local filter=${series[1]:+${series[0]}}
  local shallow=${series[0]:+${series[-1]}}

  local head=$(git log -1 --format=%H)
  debug "Fetching commits from ${shallow:-"begin"} to ${head}"
  git fetch --progress --no-tags \
    ${shallow:+"--shallow-exclude=${shallow}"} \
    $REMOTE $head:changelog \
    ${filter:+"refs/tags/${filter}:refs/tags/${filter}"}
  debug "Filtering commits from ${filter:-"begin"} to ${head}"
  git log --first-parent --format=%H ${filter:+"${filter}.."}changelog --
}

gitlogp() {
  (grep '.' || echo '..') \
    | git log --stdin --no-walk=unsorted --format=%H "$@"
}

shortlog() {
  gitlogp --author="^(?!${GIT_USER_NAME})" -P \
    | gitlogp --invert-grep --grep='Merge( remote-tracking)? branch' -E \
    | gitlogp --format=tformat:%s
}

changelogEntry() {
  local version=$1
  echo "${DEBPACKAGE} (${version}${DEBREV}) ${DEBDIST}; urgency=medium"
  echo
  sed 's/^/  * /'
  echo
  echo " -- ${DEBFULLNAME} <${DEBEMAIL}>  $(date -R)"
  echo
}

hasChangelog() {
  local version=$1
  head -1 debian/changelog | grep -qF "(${version}"
}

updateVersion() {
  local index=$1
  local version=$(getVersion)
  if [ -n "$(getTagId $version)" ]; then
    echo "Increasing version at position ${index}"
    version=$(nextVersion $version $index)
    echo "Setting project version: ${version}"
    setVersion $version
    git add $V_FILE
  else
    echo "Using project version: ${version}"
  fi
}

updateChangelog() {
  local version=$(getVersion)
  if hasChangelog $version; then
    return 0
  fi
  fetchChangelog $version \
    | shortlog \
    | changelogEntry $version \
    | cat - debian/changelog > debian/changelog.new
  mv debian/changelog.new debian/changelog
  git add debian/changelog
}

createTag() {
  local version=$(getVersion)
  git commit -m "Version: ${version}" || true
  git tag "${TAG_PREFIX}${version}"
  git push --tags
  git push
}

# setDebIdentity() {
#   export DEBFULLNAME
#   export DEBEMAIL
# }

setGitIdentity() {
  git config user.name "$GIT_USER_NAME"
  git config user.email "$GIT_USER_EMAIL"
}

createRelease() {
  updateVersion $V_PATCH

  if [ "$DEBCHANGELOG" = "y" ]; then
    updateChangelog
  fi

  setGitIdentity
  createTag
}

resolveVersionConflict() {
  local vv=$(git ls-files -u $V_FILE | wc -l)
  if [ "$vv" = "3" ]; then
    echo "Fix ${V_FILE} file conflict using ours"
    git restore --ours $V_FILE
    git add $V_FILE
    sed 's/\t/  /g' .git/MERGE_MSG \
      | git commit -F -
  else
    git merge --abort
    return 1
  fi
}

# updateBranch() {
#   local other=$1
#   local current=$(git branch --show-current)
#   echo "Merging branch ${other} into ${current}"
#   git pull --progress --ff $REMOTE $other || resolveVersionConflict
# }

shallowFetch() {
  local branch=$1
  local exclude=$2
  echo "Fetching commits from ${exclude} to ${branch}"
  git fetch --progress --shallow-exclude=$exclude $REMOTE $branch && git gc
}

shallowFail() {
  local error=$1
  echo "Fetch failed with code ${error}"
}

shallowMerge() {
  local branch=$1
  local into=$(git branch --show-current)

  echo "Merging branch ${branch} into ${into}"

  ## Fetch minimal history from both branches
  shallowFetch $branch $into || shallowFail $?
  shallowFetch $into $branch || shallowFail $?
  echo "Fetching additional commit for ${branch} and ${into}"
  git fetch --progress --deepen=1 $REMOTE $branch $into

  git merge $REMOTE/$branch || resolveVersionConflict
}

updateDev() {
  local branch=$1

  setGitIdentity
  # updateBranch $branch
  shallowMerge $branch

  updateVersion $V_MINOR

  local version=$(getVersion)
  git commit -m "Next development version: ${version}" || true
  git push
}

# updateDev() {
#   local version=$(getVersion)

#   if [ -n $(getTagId $version) ]; then
#     echo "Nothing to do"
#     return
#   fi

#   echo "Merging release: ${version}"
#   git pull --progress --ff $REMOTE "${TAG_PREFIX}${version}" || true

#   version=$(nextVersion $version $V_MINOR)
#   echo "Setting project version: ${version}"
#   setVersion $version

#   setGitIdentity
#   git commit -am "Next version: ${version}"
#   git push
# }
