#!/bin/bash
set -E

BINDIR=$(dirname $BASH_SOURCE)/../bin
BINDIR=$(readlink -f $BINDIR)

PATH=${BINDIR}:${PATH}

testFailed() {
  echo 1>&2 "Test failed: ${0}: line number ${BASH_LINENO[-2]}"
  if (( ${#FUNCNAME[@]} )); then
    echo 1>&2 "Stack trace:"
    local i len=${#FUNCNAME[@]}
    for (( i=1; i < len; i++ )); do
      echo 1>&2 "  ${BASH_SOURCE[i]}(${FUNCNAME[i]}:${BASH_LINENO[i-1]})"
    done
  fi
}

trap testFailed ERR

newTest() {
  local IFS=''
  __TEST_DESC="$*"
}

describeTest() {
  echo 1>&2 "${0}: line number ${BASH_LINENO[-2]}: ${__TEST_DESC}"
}

reportFailed() {
  echo 1>&2 "Test failed: ${0}: line number ${BASH_LINENO[-2]}: ${__TEST_DESC}"
  for arg; do
    echo 1>&2 "  ${arg//$'\n'/$'\n  '}"
  done
}

fail() {
  reportFailed "$@"
  return 1
}

assertEquals() {
  local expected=$1
  local actual=$2
  if [ "$actual" != "$expected" ]; then
    reportFailed "Actual value differs from expected." \
      "Expected: ${expected}" \
      "Actual: ${actual}"
    return 1
  fi
}

assertEmpty() {
  local -n __assertEmpty_var=$1
  if [ "$__assertEmpty_var" ]; then
    reportFailed "Expected to be empty: ${1}" \
      "Actual: ${__assertEmpty_var}"
    return 1
  fi
}

assertNotEmpty() {
  local -n __assertNotEmpty_var=$1
  if [ ! "$__assertNotEmpty_var" ]; then
    reportFailed "Expected to be not empty: ${1}"
    return 1
  fi
}

assertArrayContains() {
  local -n __assertArrayContains_var=$1
  local __assertArrayContains_key=$2
  local __assertArrayContains_val
  for __assertArrayContains_val in "${__assertArrayContains_var[@]}"; do
    if [[ "$__assertArrayContains_val" = "$__assertArrayContains_key" ]]; then
      return 0
    fi
  done
  reportFailed "Array does not contain the value." \
    "Value: ${__assertArrayContains_key}" \
    "Array: ${__assertArrayContains_var[*]}"
  return 1
}

assertFileEquals() {
  local expected=$1
  local actual=$2
  local diff
  if ! diff=$(diff "$expected" "$actual"); then
    reportFailed "File ${actual} (>) differs from expected ${expected} (<)" \
      "$diff"
    return 1
  fi
}
